

Checking valid examples...
The tokenized string for input string (A B) is (_A_B_)
The tokenized string for input string abc is abc
The tokenized string for input string a b c is a_b_c
The tokenized string for input string a (b c) is a_(_b_c_)
The tokenized string for input string \x.\y.x y is \_x_(_\_y_(_x_y_)_)
The tokenized string for input string \x (x b) is \_x_(_x_b_)
The tokenized string for input string \x(x b) is \_x_(_x_b_)
The tokenized string for input string \x (x (b c)) is \_x_(_x_(_b_c_)_)
The tokenized string for input string \x (x b c) is \_x_(_x_b_c_)
The tokenized string for input string (a) is (_a_)
The tokenized string for input string \x.(x z) is \_x_(_x_z_)
The tokenized string for input string (\x a b) is (_\_x_a_b_)
The tokenized string for input string \x.x y z is \_x_(_x_y_z_)
The tokenized string for input string \x.a bcd is \_x_(_a_bcd_)
The tokenized string for input string \x a b is \_x_a_b
The tokenized string for input string (\x a b) is (_\_x_a_b_)
The tokenized string for input string \x((a) (b)) is \_x_(_(_a_)_(_b_)_)
The tokenized string for input string \x (a) is \_x_(_a_)
The tokenized string for input string \x. a b is \_x_(_a_b_)
All lines are valid


(_A_B_)
----(
----A_B
--------A
--------B
----)


abc
----abc


a_b_c
----a
----b
----c


a_(_b_c_)
----a
----(
----b_c
--------b
--------c
----)


\_x_(_\_y_(_x_y_)_)
----\
----x
----(
----\_y_(_x_y_)
--------\
--------y
--------(
--------x_y
------------x
------------y
--------)
----)


\_x_(_x_b_)
----\
----x
----(
----x_b
--------x
--------b
----)


\_x_(_x_b_)
----\
----x
----(
----x_b
--------x
--------b
----)


\_x_(_x_(_b_c_)_)
----\
----x
----(
----x_(_b_c_)
--------x
--------(
--------b_c
------------b
------------c
--------)
----)


\_x_(_x_b_c_)
----\
----x
----(
----x_b_c
--------x
--------b
--------c
----)


(_a_)
----(
----a
--------a
----)


\_x_(_x_z_)
----\
----x
----(
----x_z
--------x
--------z
----)


(_\_x_a_b_)
----(
----\_x_a_b
--------\
--------x
--------a
--------b
----)


\_x_(_x_y_z_)
----\
----x
----(
----x_y_z
--------x
--------y
--------z
----)


\_x_(_a_bcd_)
----\
----x
----(
----a_bcd
--------a
--------bcd
----)


\_x_a_b
----\
----x
----a
----b


(_\_x_a_b_)
----(
----\_x_a_b
--------\
--------x
--------a
--------b
----)


\_x_(_(_a_)_(_b_)_)
----\
----x
----(
----(_a_)_(_b_)
--------(
--------a
------------a
--------)
--------(
--------b
------------b
--------)
----)


\_x_(_a_)
----\
----x
----(
----a
--------a
----)


\_x_(_a_b_)
----\
----x
----(
----a_b
--------a
--------b
----)


Checking invalid examples...
Bracket ( at index: 2 is not matched with a closing bracket ')'.
Invalid lambda expression at 0.
Missing complete lambda expression starting at index 4.
Bracket ( at index: 1 is not matched with a closing bracket ')'.
Missing expression for parenthesis at index 0.
Bracket ( at index: 2 is not matched with a closing bracket ')'.
Bracket ) at index: 7 is not matched with an opening bracket '('.
Encountered dot at invalid index 0.
Bracket ( at index: 0 is not matched with a closing bracket ')'.
Bracket ) at index: 0 is not matched with an opening bracket '('.
Error at index 0, variables cannot begin with digits.
The tokenized string for input string \x. (x z) is \_x_(_x_z_)
Invalid space inserted after \ at index 0.
Invalid space inserted after \ at index 0.
The tokenized string for input string \x. (a) is \_x_(_a_)
Missing complete lambda expression starting at index 0.
Bracket ( at index: 0 is not matched with a closing bracket ')'.
Bracket ) at index: 0 is not matched with an opening bracket '('.
Must have a variable name before character '.' at index 0.
The tokenized string for input string \x a is \_x_a
Must have a variable name before character '.' at index 2.
Invalid space inserted after \ at index 0.
Error at index 0 with invalid character +.
Invalid lambda expression at 0.
Invalid space inserted after \ at index 0.
Backlash not followed by a valid variable name starting at index 0.


Association Examples:
Right association
['(', 'a', ')', '(', 'b', 'c', ')']
Left association
['(', 'a', 'b', ')', '(', 'c', ')']